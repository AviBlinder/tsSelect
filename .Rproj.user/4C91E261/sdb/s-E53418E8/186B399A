{
    "collab_server" : "",
    "contents" : "#' @return the best time series model\n#' @title Run ts Models\n#' @author Avi Blinder\n#' @description Function that executes several models and picks\n#' the best one.\n#' @param ts1 A timeseries object\n#' @param accuracy_measure - Possilbe error meassures:\n#'        ME, RMSE, MAE, MPE ,MAPE, MASE, ACF1\n#' @export\n#' @import forecast\n#' @examples\n#' data(ros1_ts)\n#' run_models(ros1_ts)\n#' run_models(ros1_ts,\"RMSE\")\n\n\n\nrun_models <- function(ts1,accuracy_measure = NULL){\n\n  check_object(ts1)\n\n  ##################################################################################\n  #Step 1: Fit models\n  fit_benchm1 <- meanf(ts1,6)  # Mean forecast (x, h) h = horizon\n\n  fit_benchm2 <- naive(ts1,6)  # Navive forecast (all forecasts = last observation)\n\n  fit_benchm3 <- snaive(ts1,6) # Seassonal Naive\n  #    (each forecast to be equal to the last observed value\n  #      from the same season)\n\n  fit_benchm4 <- rwf(ts1,6,drift = TRUE) #Drift method - adds a \"trend\" over time to the naive method\n\n  fit_lm1 <- tslm(ts1 ~ trend)\n\n  #filter 'white noise\" series\n  if (summary(fit_lm1)$r.squared > 0.1)\n  {\n    fit_lm2 <- tslm(ts1 ~ trend + season)\n\n    fit_ses <- ses(ts1)\n\n    fit_ets <- ets(ts1)\n\n    fit_hw1    <- hw(ts1,seasonal=\"additive\")\n\n    fit_hw2    <- hw(ts1,seasonal=\"multiplicative\")\n\n  }\n\n  fit_holt1 <- holt(ts1)\n\n  fit_holt2 <- holt(ts1,exponental=TRUE)\n\n  fit_holt3 <- holt(ts1,damped=TRUE)\n\n  fit_holt4 <- holt(ts1,exponential=TRUE,damped=TRUE)\n\n  fit_auto_arima1 <- auto.arima(ts1,stepwise=TRUE)\n\n  fit_auto_arima2 <-  auto.arima(ts1, stepwise=FALSE, approximation=FALSE)\n\n  ##################################################################################\n  #Step 2: Measure accuracies\n\n  ac_benchm1 <- data.frame(accuracy(fit_benchm1))\n  ac_benchm1$model <- \"meanf\"\n  row.names(ac_benchm1) <- NULL\n  #\n  ac_benchm2 <- data.frame(accuracy(fit_benchm2))\n  ac_benchm2$model <- \"naive\"\n  row.names(ac_benchm2) <- NULL\n  #\n  ac_benchm3 <- data.frame(accuracy(fit_benchm3))\n  ac_benchm3$model <- \"snaive\"\n  row.names(ac_benchm3) <- NULL\n  #\n  ac_benchm4 <- data.frame(accuracy(fit_benchm4))\n  ac_benchm4$model <- \"rwf\"\n  row.names(ac_benchm4) <- NULL\n  #\n  ac_lm1     <- data.frame(accuracy(fit_lm1))\n  ac_lm1$ACF1 <- NA\n  ac_lm1$model <- \"lm_with_trend\"\n  row.names(ac_lm1) <- NULL\n\n  #\n  if (summary(fit_lm1)$r.squared > 0.1){\n    ac_lm2     <- data.frame(accuracy(fit_lm2))\n    ac_lm2$ACF1 <- NA\n    ac_lm2$model <- \"lm_with_trend_and_season\"\n    row.names(ac_lm2) <- NULL\n\n    #\n    ac_ets     <- data.frame(accuracy(fit_ets))\n    ac_ets$model <- \"ets\"\n    row.names(ac_ets) <- NULL\n    #\n    ac_ses     <- data.frame(accuracy(fit_ses))\n    ac_ses$model <- \"ses\"\n    row.names(ac_ses) <- NULL\n    #\n    ac_hw1     <- data.frame(accuracy(fit_hw1))\n    ac_hw1$model <- \"Holt-Winters_additive\"\n    row.names(ac_hw1) <- NULL\n\n    ac_hw2     <- data.frame(accuracy(fit_hw2))\n    ac_hw2$model <- \"Holt-Winters_multiplicative\"\n    row.names(ac_hw2) <- NULL\n  }\n  #\n\n  ac_holt1   <- data.frame(accuracy(fit_holt1))\n  ac_holt1$model <- \"Holt_simple\"\n  row.names(ac_holt1) <- NULL\n  #\n  ac_holt2   <- data.frame(accuracy(fit_holt2))\n  ac_holt2$model <- \"Holt_exponential\"\n  row.names(ac_holt2) <- NULL\n  #\n  ac_holt3   <- data.frame(accuracy(fit_holt3))\n  ac_holt3$model <- \"Holt_damped\"\n  row.names(ac_holt3) <- NULL\n  #\n  ac_holt4   <- data.frame(accuracy(fit_holt4))\n  ac_holt4$model <- \"Holt_exponential_damped\"\n  row.names(ac_holt4) <- NULL\n\n\n  ac_auto_arima1     <- data.frame(accuracy(fit_auto_arima1))\n  ac_auto_arima1$model <- \"Auto_Arima\"\n  row.names(ac_auto_arima1) <- NULL\n\n  ac_auto_arima2     <- data.frame(accuracy(fit_auto_arima2))\n  ac_auto_arima2$model <- \"Auto_Arima_No_Stepwise\"\n  row.names(ac_auto_arima2) <- NULL\n\n  ##################################################################################\n  #Step 3: Combine models and pick best one\n\n  if (summary(fit_lm1)$r.squared > 0.1){\n\n    accuracies <- rbind(ac_benchm1,ac_benchm2,ac_benchm3,ac_benchm4,\n                        ac_lm1,ac_lm2,ac_ets,ac_ses,\n                        ac_holt1,ac_holt2,ac_holt3,ac_holt4,ac_hw1,ac_hw2,\n                        ac_auto_arima1,ac_auto_arima2)\n    all_models <-   list(\"meanf\"    =    fit_benchm1 ,\n                         \"naive\"         =    fit_benchm2 ,\n                         \"snaive\"        =    fit_benchm3 ,\n                         \"rwf\"           =    fit_benchm4 ,\n                         \"lm_with_trend\" =    fit_lm1     ,\n                         \"lm_with_trend_and_season\" = fit_lm2 ,\n                         \"ses\"           =    fit_ses ,\n                         \"ets\"           =    fit_ets ,\n                         \"Holt-Winters_additive\" =  fit_hw1 ,\n                         \"Holt-Winters_multiplicative\" = fit_hw2 ,\n                         \"Holt_simple\"   =    fit_holt1 ,\n                         \"Holt_exponential\"  =    fit_holt2 ,\n                         \"Holt_damped\"       =    fit_holt3 ,\n                         \"Holt_exponential_damped\" =    fit_holt4 ,\n                         \"Auto_Arima\"        =    fit_auto_arima1 ,\n                         \"Auto_Arima_No_Stepwise\" =    fit_auto_arima2)\n\n  } else {\n    accuracies <- rbind(ac_benchm1,ac_benchm2,ac_benchm3,ac_benchm4,\n                        ac_lm1,\n                        ac_holt1,ac_holt2,ac_holt3,ac_holt4,\n                        ac_auto_arima1,ac_auto_arima2)\n    all_models <-   list(\"meanf\"    =    fit_benchm1 ,\n                         \"naive\"         =    fit_benchm2 ,\n                         \"snaive\"        =    fit_benchm3 ,\n                         \"rwf\"           =    fit_benchm4 ,\n                         \"lm_with_trend\" =    fit_lm1     ,\n                         \"Holt_simple\"   =    fit_holt1 ,\n                         \"Holt_exponential\"  =    fit_holt2 ,\n                         \"Holt_damped\"       =    fit_holt3 ,\n                         \"Holt_exponential_damped\" =    fit_holt4 ,\n                         \"Auto_Arima\"        =    fit_auto_arima1 ,\n                         \"Auto_Arima_No_Stepwise\" =    fit_auto_arima2)\n\n  }\n\n  if(is.null(accuracy_measure)){\n    x2 <- c()\n    for (i in 1:ncol(accuracies)){\n      x1 <- accuracies[accuracies[,i] == min(accuracies[,i],na.rm = TRUE),\"model\"]\n      x2 <- c(x2,x1)\n    }\n    selected_model <- sort(table(x2),decreasing = TRUE)[1]\n  } else {\n    col <- which(names(accuracies) == accuracy_measure )\n    selected_model <- accuracies[accuracies[,col] == min(accuracies[,col],na.rm = TRUE),\"model\"]\n    if (length(selected_model) > 1) {\n      selected_model <- selected_model[3]\n    }\n  }\n\n  return    <- list(selected = selected_model,\n                    model=all_models[names(all_models) == names(selected_model)]) }\n\n#'\n#' @return stops if object not a ts class\n#' @author Avi Blinder\n#' @title Check Object class\n#' @description Internal function that verifies the class of the object\n#'  (should be time series)\n#' @details internal function for verifying that the object belongs\n#'  to class \"time series\"\n#' @param x A timeseries object\n\n\ncheck_object <- function(x){\n\n  if (length(x) == 0 ) {\n    cat (\"missing input variable\")\n    stop(\"missing input\")\n\n  }\n\n}\n\n",
    "created" : 1475439372642.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2875300770",
    "id" : "186B399A",
    "lastKnownWriteTime" : 1475442181,
    "last_content_update" : 1475442181533,
    "path" : "D:/Data Science Projects/R_Packages/tsSelect/R/tsSelect.r",
    "project_path" : "R/tsSelect.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}